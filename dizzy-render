#!/usr/bin/perl
use strict;
use warnings;

use B::Deparse;
use Digest::SHA1 qw(sha1_hex);

use lib 'lib';
use Dizzy::Textures;

my @textures = Dizzy::Textures::textures();

my $res = $ARGV[0] ||= 256;
my @tbr = @ARGV[1..$#ARGV];

foreach my $texture (@textures) {
	next if (@tbr and not grep { $_ eq $texture->{name} } @tbr);
	my $hash = sha1_hex(new B::Deparse()->coderef2text($texture->{function}));
	my $fn = "$hash-$texture->{name}-$res";
	print STDERR "rendering $fn " . " " x (16 + 60 - length($fn));
	open(my $outfile, ">", "texture_cache/$fn");
	for (my $y = 0; $y < $res; $y++) {
		print STDERR sprintf("%s(line %4d/%4d)", "\b" x 16, $y, $res) if (!($y % 16));
		my $val;
		for (my $x = 0; $x < $res; $x++) {
			$val = $texture->{function}->($x / $res - 0.5, $y / $res - 0.5);
			print $outfile pack("f", $val);
		}
	}
	close($outfile);
	print STDERR "\n";
}
