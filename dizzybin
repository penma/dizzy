#!/usr/bin/env perl
use strict;
use warnings;
use 5.010;

use Getopt::Long qw(:config no_ignore_case bundling);

sub usage_message {
	print STDERR << "EOH";
usage: dizzy [options]

   Graphics settings:
     -w num           set window width
     -h num           set window height
     -f               run in fullscreen mode
     -r num           set texture resolution (power of two)
     -s num           set texture display scale

   Auto mode:
     -a               activate auto mode
     -A num           set a new texture every num seconds

   Texture switching options:
     -t switcher      choose the texture switcher
     -T opt=val       pass options to the texture switcher
EOH
}

my %options = (
	help                   => sub { usage_message(); exit(0); },

	width                  => 0,
	height                 => 0,
	fullscreen             => 0,
	texture_resolution     => 64,
	texture_scale          => 50,

	automode               => 0,
	automode_wait          => 7,

	texswitcher            => 'Simple',
	texswitcher_options    => {},
);

GetOptions(\%options,
	'help|?',

	'width|w=i',
	'height|h=i',
	'fullscreen|f+',
	'texture_resolution|texture-resolution|r=i',
	'texture_scale|texture-scale|s=f',

	'automode|a+',
	'automode_wait|automode-wait|A=f',

	'texswitcher|t=s',
	'texswitcher_options|texswitcher-options|T=s',

	'debug_show_planes|debug-show-planes+',
	'debug_show_messages|debug-show-messages+',
) or (usage_message(), exit(1));

########
use OpenGL qw(:all);
use Math::Trig;
use Time::HiRes qw(sleep time);
use Dizzy::TextureGenerator;
use Dizzy::TextureManager;
use Dizzy::TextureSwitcher;
use Dizzy::Render;
use Dizzy::GLUT;
use Dizzy::Handlers;

Dizzy::GLUT::init(title => "Dizzy", width => $options{width}, height => $options{height}, fullscreen => $options{fullscreen});
Dizzy::Render::init_view(texture_scale => $options{texture_scale});

Dizzy::TextureManager::init(
	texture_resolution => $options{texture_resolution},
);
sub wrapval {
	   if ($_[0] < 0.0) { return 1.0; }
	elsif ($_[0] > 1.0) { return 0.0; }
	else                { return $_[0]; }
}

# read textures dir
opendir(my $textures, "textures/");
foreach my $texture (sort readdir($textures)) {
	next if (! -f "textures/$texture");
	my $tex = do("textures/$texture");
	Dizzy::TextureManager::add(%{$tex});
}

Dizzy::TextureSwitcher::init($options{texswitcher}, %{$options{texswitcher_options}});

# text rendering
my ($text_start, $text_text) = (0, "");
if ($options{debug_show_messages}) {
	Dizzy::Handlers::register_last(
		render => sub {
			if (defined $text_text and time() - $text_start <= 1.5 + length($text_text) / 13) {
				# disable blending and texturing, otherwise the text would look funny.
				glDisable(GL_BLEND);
				glDisable(GL_TEXTURE_2D);

				# draw the text shadow
				glColor3f(0, 0, 0);
				glRasterPos2f(-3.0, 2.2);
				foreach (split(//, $text_text)) {
					glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, ord $_);
				}

				# draw the text itself
				glColor3f(1, 1, 1);
				glRasterPos2f(-3.01, 2.19);
				foreach (split(//, $text_text)) {
					glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, ord $_);
				}

				# reenable texturing and blending
				glEnable(GL_BLEND);
				glEnable(GL_TEXTURE_2D);

				# update display
				glFlush();
			}
			Dizzy::Handlers::GO_ON;
		},
	);
}


Dizzy::Handlers::register(
	keyboard => sub {
		my %args = @_;

		# so we don't get warning spam
		$args{ascii} //= "";
		$args{special} //= -1;

		if ($args{ascii} eq "\e") { # escape
			exit(0);
		} elsif ($args{special} == GLUT_KEY_LEFT or $args{special} == GLUT_KEY_RIGHT) {
			Dizzy::Handlers::invoke("texture_switch",
				direction => (($args{special} == GLUT_KEY_LEFT) ? -1 : +1),
			);
		}

		Dizzy::Handlers::GO_ON;
	},

	# notify user about texture switches
	texture_changed => sub {
		my %args = @_;
		print "*** selected texture \"$args{name}\"\n";

		# draw an informational message.
		$text_start = time;
		$text_text = $args{name};
		Dizzy::Handlers::GO_ON;
	},

	# auto mode. move? or leave it here?
	render => sub {
		state $last_switch = 0;

		if ($options{automode}) {
			if ($last_switch + $options{automode_wait} <= time()) {
				$last_switch = time();
				Dizzy::Handlers::invoke("texture_switch", direction => +1);
			}
		}

		Dizzy::Handlers::GO_ON;
	},

	# to be moved to: somewhere else (or keep it here? it's nice and warm)
	render => sub {
		Dizzy::Render::render_planes(
			tick => time() - $^T,
			rotator_func => sub {
				my ($tick, $plane) = @_;
				if ($options{debug_show_planes}) {
					glScalef(0.2, 0.2, 0.2);
				}
				if ($plane == 1) {
					glRotatef($tick * 5, 0, 0, 1);
					glTranslatef(sin($tick * 0.5), cos($tick * 0.75), 0);
				} elsif ($plane == 2) {
					glRotatef($tick * -2.5, 0, 0, 1);
					glTranslatef(sin($tick * 0.5), cos($tick * 0.75), 0);
				}
			},
		);

		Dizzy::Handlers::GO_ON;
	},
);

Dizzy::TextureManager::set(0);

Dizzy::GLUT::run();

