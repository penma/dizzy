#!/usr/bin/env perl
use strict;
use warnings;

use Getopt::Long qw(:config no_ignore_case bundling);

sub usage_message {
	print STDERR << "EOH";
usage: dizzy [options]

   Graphics settings:
     -h num           set window height
     -f               run in fullscreen mode
     -t num           set texture resolution (power of two)

   Auto mode:
     -a               activate auto mode
     -aw num          set a new texture every num milliseconds

   Texture blending options:
     -tb              activate texture blending
     -tbduration num  duration of the transition in milliseconds
EOH
}

my %options = (
	help                   => sub { usage_message(); exit(0); },

	width                  => -1,
	height                 => -1,
	texture_resolution     => 64,
	texture_scale          => 50,

	automode               => 0,
	automode_wait          => 7,

	texblend               => 0,
	texblend_duration      => 2,
);

GetOptions(\%options,
	'help|?',

	'width|w=i',
	'height|h=i',
	'texture_resolution|texture-resolution=i',
	'texture_scale|texture-scale=f',

	'automode|a+',
	'automode_wait|automode-wait=f',

	'texblend|t+',
	'texblend_duration|texblend-duration=f',
) or (usage_message(), exit(1));

########
use OpenGL::Simple qw(:all);
use OpenGL::Simple::GLUT qw(:all);
use Math::Trig;
use Time::HiRes qw(sleep time);
use Dizzy::TextureGenerator;
use Dizzy::TextureManager;
use Dizzy::Render;
use Dizzy::GLUT;
use Dizzy::Handlers;

Dizzy::GLUT::init(title => "Dizzy");
Dizzy::Render::init_view(texture_scale => $options{texture_scale});

Dizzy::TextureManager::init(
	texture_resolution => $options{texture_resolution},
);
sub wrapval {
	   if ($_[0] < 0.0) { return 1.0; }
	elsif ($_[0] > 1.0) { return 0.0; }
	else                { return $_[0]; }
}
foreach my $tex (
{
	function => sub {
		my ($x, $y) = @_;
		my $val = sin(pi / (0.0001 + 2 * sqrt($x**2 + $y**2))) / 2 + 0.5;
		return wrapval($val);
	},
	name => "P1",
},
{
	function => sub {
		my ($x, $y) = @_;
		my $val = (cos($y * pi) + sin($x * pi)) / 2 + 0.5;
		return wrapval($val);
	},
	name => "P2",
}
) {
	Dizzy::TextureManager::add(%{$tex});
}

Dizzy::Handlers::register(
	keyboard => sub {
		my %args = @_;

		# so we don't get warning spam
		$args{ascii} //= "";
		$args{special} //= -1;

		if ($args{ascii} eq "\e") { # escape
			exit(0);
		} elsif ($args{special} == GLUT_KEY_LEFT or $args{special} == GLUT_KEY_RIGHT) {
			Dizzy::Handlers::invoke("texture_switch",
				direction => (($args{special} == GLUT_KEY_LEFT) ? -1 : +1),
			);
		}

		Dizzy::Handlers::GO_ON;
	},

	# to be moved to: TexBlend
	texture_switch => sub {
		my %args = @_;
		# check here if we are currently blending. if we are, STOP.
		# else:
		Dizzy::Handlers::GO_ON;
	},

	# the simple texture switcher: eats the function and makes a texture.
	texture_switch => sub {
		my %args = @_;
		my $some_texture;
		print "<Simple texture switcher> Changing texture (from GL texture $args{old_gl_texture})!\n";
		print "<Simple texture switcher> using GL texture $args{gl_texture}\n";
		glBindTexture(GL_TEXTURE_2D, $args{gl_texture});
		Dizzy::Handlers::GO_ON;
	},

	# notify user about texture switches
	texture_changed => sub {
		my %args = @_;
		print "*** selected texture \"$args{name}\"\n";
		Dizzy::Handlers::GO_ON;
	},

	render => sub {
		Dizzy::Render::render_planes(
			tick => time() - $^T,
			rotator_func => sub {
				my ($tick, $plane) = @_;
				if ($plane == 1) {
					glRotate($tick * 5, 0, 0, 1);
					glTranslate(sin($tick * 0.5) * 100, cos($tick * 0.75) * 100, 0);
				} elsif ($plane == 2) {
					glRotate($tick * -2.5, 0, 0, 1);
					glTranslate(sin($tick * 0.5) * 100, cos($tick * 0.75) * 100, 0);
				}
			},
		);

		Dizzy::Handlers::GO_ON;
	},
);

Dizzy::TextureManager::set(0);

Dizzy::GLUT::run();

